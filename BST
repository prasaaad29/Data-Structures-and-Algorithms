#include <bits/stdc++.h>
using namespace std;

struct tnode
{
    int data;
    tnode *lchild;
    tnode *rchild;
};

class bst
{
    tnode *root=NULL;
public:
    tnode *getnode(int);
    tnode *getroot();
    tnode *insertion_rec(tnode*,int);
    void insertion_nonrec(int);
    void preorder_rec(tnode*);
    void inorder_rec(tnode*);
    void postorder_rec(tnode*);
    void search_nonrec(int);
    tnode *search_rec(tnode*,int);
    tnode *minval(tnode*);
    tnode *deletion_rec(tnode*,int);
    int height_rec(tnode*);
    void levelOrder(tnode*);
    tnode *mirror(tnode*);
};

tnode *bst::getnode(int num)
{
    tnode *temp=new tnode();
    temp->data=num;
    temp->lchild=NULL;
    temp->rchild=NULL;
    return temp;
}

tnode *bst::getroot() {return root;}


void bst::insertion_nonrec(int num)
{
    if(root==NULL)
    {
        root=getnode(num);
        return;
    }
    tnode *temp=root;


    bool flag=true;
    while (flag)
    {
        if (num==temp->data)
        {
            cout<<"\nThe value is already present!\n";
            flag=false;
        }

        else if (num < temp->data)
        {
            if (temp->lchild == NULL)
            {
                tnode *newnode = getnode(num);
                temp->lchild = newnode;
                flag=false;
            }
            else
            {
                temp = temp->lchild;
            }
        }
        else
        {
            if (temp->rchild == NULL)
            {
                tnode *newnode = getnode(num);
                temp->rchild = newnode;
                flag=false;
            }
            else
            {
                temp = temp->rchild;
            }
        }
    }

}

tnode *bst::insertion_rec(tnode *temp,int num)
{
    if (root==NULL)
    {
        root=getnode(num);
        return root;
    }
    tnode *pass=temp;
    if (num==pass->data)
    {
        cout<<"\nThe value is already present!\n";
        return pass;
    }
    if (num<pass->data)
    {
        if (pass->lchild==NULL)
        {
            tnode *newnode=getnode(num);
            pass->lchild=newnode;
            return pass;
        }
        else
        {
            insertion_rec(pass->lchild,num);
        }

    }
    else if (num>pass->data)
    {
        if (pass->rchild==NULL)
        {
            tnode *newnode=getnode(num);
            pass->rchild=newnode;
            return pass;
        }
        else
        {
            insertion_rec(pass->rchild,num);
        }

    }
    return pass;
}

void bst::search_nonrec(int num)
{
    if (root==NULL)
    {
        cout<<"\nThe tree is empty!\n";
        return;
    }
    tnode *pass=root;
    bool flag=true;
    while (pass!=NULL)
    {
        if (num==pass->data)
        {
            cout<<"\nThe value is found!\n";
            flag=false;
            return;
        }
        else if (num<pass->data)
        {
            pass=pass->lchild;
        }
        else
        {
            pass=pass->rchild;
        }
    }
    if (flag)
    {
        cout<<"\nThe value is not found!\n";
    }
}

tnode *bst::search_rec(tnode *temp,int num)
{
    tnode *pass=temp;
    if (pass==NULL)
    {
        return NULL;
    }
    if (num==pass->data)
    {
        cout<<"\nThe value is found!\n";
        return pass;
    }
    else if (num<pass->data)
    {
        pass=search_rec(pass->lchild,num);
        if (pass==NULL)
        {
            return pass;
        }
    }
    else
    {
        pass=search_rec(pass->rchild,num);
        if (pass==NULL)
        {
            return pass;
        }
    }

}

tnode *bst::minval(tnode *temp)
{
    while (temp->lchild!=NULL)
    {
        temp=temp->lchild;
    }
    return temp;
}

tnode *bst::deletion_rec(tnode* temp,int num)
{
    tnode *pass=temp;
    if (pass==NULL)
    {
        return NULL;
    }
    if (num<pass->data)
    {
        pass->lchild=deletion_rec(pass->lchild,num);
    }
    else if (num>pass->data)
    {
        pass->rchild=deletion_rec(pass->rchild,num);
    }
    else
    {
        if(pass->lchild==NULL)
        {
            tnode *newnode=pass->rchild;
            delete pass;
            return newnode;
        }
        else if(pass->rchild==NULL)
        {
            tnode *newnode=pass->lchild;
            delete pass;
            return newnode;
        }
        else
        {
            tnode *min_node=minval(pass->rchild);
            pass->data=min_node->data;
            pass->rchild=deletion_rec(pass->rchild,min_node->data);
        }

    }
    return temp;
}


void bst::preorder_rec(tnode *root)
{
    if (root!=NULL)
    {
        cout<<root->data<<" ";
        preorder_rec(root->lchild);
        preorder_rec(root->rchild);
    }
}

void bst::inorder_rec(tnode *root)
{
    if (root!=NULL)
    {
        inorder_rec(root->lchild);
        cout<<root->data<<" ";
        inorder_rec(root->rchild);
    }
}

void bst::postorder_rec(tnode *root)
{
    if (root!=NULL)
    {
        postorder_rec(root->lchild);
        postorder_rec(root->rchild);
        cout<<root->data<<" ";
    }
}


int bst::height_rec(tnode* pass)
{
    if(pass==NULL)
    {
        return -1;
    }
    else
    {
        int leftheight=height_rec(pass->lchild);
        int rightheight=height_rec(pass->rchild);
        if(leftheight>rightheight)
        {
            return (1+leftheight);
        }
        else
        {
            return (1+rightheight);
        }
    }
}

void bst::levelOrder(tnode * pass)
{
    if(pass==NULL)
    {
        cout<<"\nThe tree is empty!\n";
        return;
    }
    else
    {
        queue<tnode*> queue;
        queue.push(pass);
        while(!queue.empty())
        {
            tnode* temp = queue.front();
            queue.pop();
            cout<<temp->data<<" ";
            if(temp->lchild!=NULL)
            {
                queue.push(temp->lchild);
            }
            if(temp->rchild!=NULL)
            {
                queue.push(temp->rchild);
            }
        }
    }
}

tnode* bst::mirror(tnode* pass)
{
    tnode*temp=NULL;

    if(pass!=NULL)
    {
        temp=pass->rchild;
        pass->rchild=pass->lchild;
        pass->lchild=temp;
        mirror(pass->lchild);
        mirror(pass->rchild);
    }
    return pass;
}

int main()
{
    bst b;

    while (1)
    {
        cout << "\n1)Insert\n2)Display\n3)Search\n4)Delete\n5)Get root\n"
                "6)Height\n7)Levelorder\n8)Mirror\n0)Exit\n";

        cout << "\nEnter choice::";
        int choice;
        cin >> choice;

        switch (choice)
        {
            case 1:
            {
                cout << "\nEnter number to insert::";
                int num;
                cin >> num;
                b.insertion_rec(b.getroot(),num);
                break;
            }
            case 2:
            {
                cout << "\nRecursive Traversal::";
                cout << "\nPreorder::";
                b.preorder_rec(b.getroot());
                cout << "\nInorder::";
                b.inorder_rec(b.getroot());
                cout << "\nPostorder::";
                b.postorder_rec(b.getroot());
                break;
            }
            case 3:
            {
                cout << "\nEnter number to search::";
                int num;
                cin >> num;
                tnode *temp=b.search_rec(b.getroot(),num);
                if (temp==NULL)
                {
                    cout<<"\nThe value is not found!\n";
                }
                break;
            }
            case 4:
            {
                cout << "\nEnter number to delete::";
                int num;
                cin >> num;
                tnode *temp=b.deletion_rec(b.getroot(),num);
                if (temp==NULL)
                {
                    cout<<"\nThe value is not found!\n";
                }
                else
                {
                    cout<<"\nThe value is deleted!\n";
                }
                break;
            }
            case 5: {
                tnode *temp = b.getroot();
                if (temp == NULL) {
                    cout << "\nThe tree is empty!\n";
                } else {
                    cout << "The root is ::" << temp->data << endl;
                }
                break;
            }
            case 6:
            {
                cout<<"The height of tree is ::"<<b.height_rec(b.getroot())<<endl;
                break;
            }
            case 7:
            {
                b.levelOrder(b.getroot());
                break;
            }
            case 8:
            {
                b.mirror(b.getroot());
                b.levelOrder(b.getroot());
                break;
            }
            case 0: {
                cout << "\n\nThank you!\n\n";
                return 0;
            }
            default: {
                cout << "\n\n!Invalid Input!\n\n";
                break;
            }

        }
    }

}





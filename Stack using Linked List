#include <bits/stdc++.h>
using namespace std;

struct node
{
    char data;
    node *next;
};

class Stack
{
    node *top=NULL;
public:
    bool isEmpty();
    char getTop();
    node *getnode(char);
    void push(char);
    node *pop();
    void display();
};

bool Stack::isEmpty()
{
    if (top==NULL)
        return true;
    return false;
}

char Stack::getTop() {return top->data;}


node *Stack::getnode(char c)
{
    node *temp=new node();
    temp->data=c;
    temp->next=NULL;
    return temp;
}

void Stack::push(char c)
{
    node *temp=getnode(c);
    temp->next=top;
    top=temp;
}

node *Stack::pop()
{
    if (isEmpty())
    {
        return NULL;
    }
    node *temp=top;
    top=top->next;
    temp->next=NULL;
    return temp;
}

void Stack::display()
{
    if (isEmpty())
    {
        cout<<"\n\nStack is empty!\n\n";
        return;
    }

    node *pass=top;
    while (pass!=NULL)
    {
        cout<<pass->data<<endl;
        pass=pass->next;
    }
    cout<<"\n\n";

}



int main()
{
    Stack s;

    while (1)
    {
        cout << "\n1)Push\n2)Pop\n3)Display\n4)Top\n5)Exit\n";
        int choice;
        cout << "\nEnter choice::";
        cin >> choice;

        switch (choice) {
            case 1: {
                cout << "\nEnter character to insert::";
                char c;
                cin >> c;
                s.push(c);
                break;
            }
            case 2: {
                node *temp = s.pop();
                if (temp == NULL) {
                    cout << "\n\nStack is empty!\n\n";
                } else {
                    cout << "The poped element is ::" << temp->data << "\n";
                }
                break;
            }
            case 3: {
                s.display();
                break;
            }
            case 4: {
                cout << "The top element ::" << s.getTop();
                break;
            }
            case 5: {
                cout << "\n\nThank You!\n\n";
                return 0;
            }
            default: {
                cout << "\n\n!Invalid Input!\n\n";
                break;
            }

        }
    }
}


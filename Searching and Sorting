#include <bits/stdc++.h>
using namespace std;

//linear search
int linearSearch(int a[],int size,int key)
{
    for (int i = 0; i < size; ++i)
    {
        if (a[i]==key)
        {
            return i;
        }
    }
    return -1;
}

//binary search recursive
int rec_binarySearch(int a[],int l,int r,int key)
{
    int mid;

    if (l<=r)
    {
        mid=(l+r)/2;

        if (a[mid]==key)
            return mid;

        if(a[mid]>key)
        {
            return rec_binarySearch(a,l,mid-1,key);
        }

        if(a[mid]<key)
        {
            return rec_binarySearch(a,mid+1,r,key);
        }


    }

    return -1;

}



//binary search non recursive
int nonrec_binarySearch(int a[],int l,int r,int key)
{
    while (l<=r)
    {

        int mid=(l+r)/2;

        if (a[mid]==key)
        {
            return mid;
        }
        else if(a[mid]>key)
        {
            r=mid-1;
        }
        else
        {
            l=mid+1;
        }
    }
    return -1;
}

//fibonacci search
int min(int a,int b)
{
    return a>b ? b:a;
}

int fibonacciSearch(int a[],int size,int key)
{
    int fibmin2=0;
    int fibmin1=1;
    int fib=fibmin1+fibmin2;
    while (fib<size)
    {
        fibmin2=fibmin1;
        fibmin1=fib;
        fib=fibmin1+fibmin2;
    }

    int offset=-1;

    while (fib>1)
    {
        int i=min(offset+fibmin2,size-1);

        if (a[i]<key)
        {
            fib=fibmin1;
            fibmin1=fibmin2;
            fibmin2=fib-fibmin1;
            offset=i;
        }
        else if (a[i]>key)
        {
            fib=fibmin2;
            fibmin1=fibmin1-fibmin2;
            fibmin2=fib-fibmin1;
        }
        else
            return i;
    }

    if (fibmin1 and a[offset+fibmin2]==key)
        return (offset+1);

    return -1;

}


//selection sort
void selestionSort(int a[],int size)
{
    int temp;

    for (int i = 0; i < size - 1; ++i)
    {
        temp=i;
        for (int j = i+1; j < size; ++j)
        {
            if (a[temp]>a[j])
            {
                temp=j;
            }
        }
        swap(a[temp],a[i]);
    }

}


//binary search
void bubbleSort(int a[],int size)
{
    for (int i = 0; i < size-1; ++i)
    {
        for (int j = 0; j < size-1-i; ++j)
        {
            if (a[j]>a[j+1])
            {
                swap(a[j],a[j+1]);
            }
        }
    }
}

//insertion sort
void insertion(int a[],int size)
{
    for (int i = 1; i < size; ++i)
    {
        int j=i-1;
        int temp=a[i];

        while (j>=0 and a[j]>temp)
        {
            a[j+1]=a[j];
            j--;
        }
        a[j+1]=temp;
    }
}


//shell sort
void shellSort(int a[],int size)
{
    for (int gap = size/2; gap >= 1; gap/=2)
    {
        for (int i = gap; i < size; ++i)
        {
            for (int j = i-gap; j >=0 ; j=j-gap)
            {
                if (a[j+gap]>a[j])
                {
                    break;
                }
                else
                {
                    swap(a[j+gap],a[j]);
                }
            }
        }
    }
}

//merge sort
void merge(int a[],int l,int mid,int r)
{
    int i=l,j=mid+1;
    int b[5];
    int k=l;

    while (i<=mid and j<=r)
    {
        if (a[i]>a[j])
        {
            b[k]=a[j];
            k++;j++;
        }
        if (a[i]<=a[j])
        {
            b[k]=a[i];
            k++;i++;
        }
    }
    while (i<=mid)
    {
        b[k]=a[i];
        k++;i++;
    }
    while (j<=r)
    {
        b[k]=a[j];
        k++;j++;
    }

    for (int m = l; m <= r; ++m)
    {
        a[m]=b[m];
    }

}


void mergesort(int a[],int l,int r)
{
    if (l<r)
    {
        int mid=(l+r)/2;
        mergesort(a,l,mid);
        mergesort(a,mid+1,r);
        merge(a,l,mid,r);
    }
}


//quick sort
int partition(int a[],int l,int r)
{
    int pivot=l;
    int i=l,j=r;

    while (i<j)
    {
        if (a[pivot]>=a[i])
        {
            i++;
        }
        if (a[pivot]<a[j])
        {
            j--;
        }
        if (i<j)
        {
            swap(a[i],a[j]);
        }
    }
    swap(a[pivot],a[j]);
    return j;

}

void quicksort(int a[],int l,int r)
{
    if (l<r)
    {
        int part=partition(a,l,r);
        quicksort(a,l,part);
        quicksort(a,part+1,r);
    }
}

//counting sort
void countingSort(vector<int>& a)
{
    int max=*max_element(a.begin(),a.end());
    int min=*min_element(a.begin(),a.end());
    int range=max-min+1;

    vector<int> count(range),output(a.size());

    for (int i = 0; i < a.size(); ++i)
    {
        count[a[i]-min]++;
    }
    for (int i = 1; i < count.size(); ++i)
    {
        count[i]+=count[i-1];
    }
    for (int i = a.size()-1; i >=0 ; --i)
    {
        output[count[a[i]-min]-1]=a[i];
        count[a[i]-min]--;
    }

    for (int i = 0; i < a.size(); ++i)
    {
        a[i]=output[i];
    }

}


//radix sort
void countsort(int a[],int size,int pos)
{

    int output[size];
    int count[10]={0};

    for (int i = 0; i < size; ++i)
    {
        count[(a[i]/pos)%10]++;
    }
    for (int i = 1; i < 10; ++i)
    {
        count[i]+=count[i-1];
    }
    for (int i = size-1; i >= 0; i--)
    {
        output[count[(a[i]/pos)%10]-1]=a[i];
        count[(a[i]/pos)%10]--;
    }
    for (int i = 0; i < size; ++i)
    {
        a[i]=output[i];
    }
}


void radix(int a[],int size)
{
    int max = *max_element(a,a+size);

    for (int pos = 1; max/pos > 0; pos*=10)
    {
        countsort(a,size,pos);
    }

}


int main()
{
    int a[]={4,8,1,5,9};

//    linearSearch(arr,n,3)
//    cout<<nonrec_binarySearch(a,0,n-1,5);
//    cout<<rec_binarySearch(a,0,n-1,5);
//    selestionSort(a,5);
//    bubbleSort(a,5);
//    insertion(a,5);
//    quicksort(a,0,4);
//    mergesort(a,0,4);
//    cout<<fibonacciSearch(a,5,7);
//    shellSort(a,5);

//    vector<int> arr = { -5, -10, 0, -3, 8, 5, -1, 10 };
//    countingSort(arr);
//    for (int i = 0; i < arr.size(); ++i) {cout<<arr[i]<<" ";}

//    radix(a,5);

    for(int i:a)cout<<i<<" ";

}

